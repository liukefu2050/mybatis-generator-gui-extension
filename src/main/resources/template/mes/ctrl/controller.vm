package ${table.basePackage}.ctrl;

import amy.common.utils.StringUtil;
import ${table.basePackage}.intf.I${table.entityBaseName}Service;
import ${table.basePackage}.intf.dto.Query${table.entityBaseName}DTO;
import ${table.basePackage}.vo.${table.entityBaseName}Vo;
import amy.mes.user.intf.IUserService;
import amy.mes.user.intf.dto.UserDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

@Controller
@Scope("prototype")
@RequestMapping({"/${table.entityLowerBaseName}"})
public class ${table.entityBaseName}Controller {

  @Autowired
  private IUserService userService;
  @Autowired
  private I${table.entityBaseName}Service ${table.entityLowerBaseName}Service;

  @RequestMapping("/list")
  @ResponseBody
  public String list(Query${table.entityBaseName}DTO dto) {
    return ${table.entityLowerBaseName}Service.queryList(dto);
  }

  @RequestMapping("/{pk}/query")
  @ResponseBody
  public String query(@PathVariable String pk) {
    return ${table.entityLowerBaseName}Service.queryByPk(pk);
  }

  @RequestMapping("/{pk}/delete")
  @ResponseBody
  public String delete(@PathVariable String pk) {
    UserDTO currentUser = userService.getCurrentUser();
    ${table.entityBaseName}Vo vo = new ${table.entityBaseName}Vo();
    vo.setPk(pk);
    vo.setPk_updator(currentUser.getPk_user());
    return ${table.entityLowerBaseName}Service.deleteByPk(vo);
  }


  @RequestMapping("/batchDelete")
  @ResponseBody
  public String delete(@RequestBody List<String> pks) {
    UserDTO currentUser = userService.getCurrentUser();
    return ${table.entityLowerBaseName}Service.batchDelete(pks,currentUser.getPk_user());
  }

  @RequestMapping("/save")
  @ResponseBody
  public String save(@RequestBody ${table.entityBaseName}Vo vo) {
    UserDTO currentUser = userService.getCurrentUser();
    if (StringUtil.isNotBlank(vo.getPk())) {
      vo.setPk_creator(currentUser.getPk_user());
    }
    vo.setPk_updator(currentUser.getPk_user());
    return ${table.entityLowerBaseName}Service.save(vo);
  }

}
